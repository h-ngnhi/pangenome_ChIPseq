manifest {
    name = 'h-ngnhi/pangenome_ChIPseq'
    author = 'Nhi Hoang Nguyen'
    description = 'A pangenome ChIP-seq analysis pipeline'
    defaultBranch = 'main' 
}

// main parameters
params {
    help=false          // Long option: --help
    short_help=false    // Short option: -h

    ref="graph" 
    input=null

    cpus=64
    memory='249 GB'
    time='24h'
}

def slurmTimeFormat(timeStr) {
    // Pattern for SLURM time format HH:MM:SS or D-HH:MM:SS
    def slurmPattern = /^\d+:\d{2}:\d{2}$/
    if (timeStr ==~ slurmPattern) {
        return timeStr  // Already in SLURM format
    }

    // Pattern for custom formats like 12h30m, 1d5h, 30m
    def pattern = /(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?/
    def matcher = timeStr =~ pattern

    if (!matcher.matches()) {
        throw new IllegalArgumentException("Invalid time format: $timeStr")
    }

    def days = matcher[0][1] ? matcher[0][1].toInteger() : 0
    def hours = matcher[0][2] ? matcher[0][2].toInteger() : 0
    def minutes = matcher[0][3] ? matcher[0][3].toInteger() : 0

    // Convert days to hours
    hours += days * 24

    // Return time in HH:MM:SS format
    return String.format('%02d:%02d:00', hours, minutes)
}

process {
    executor = 'slurm'      // Use SLURM executor
    queue = 'def-bourqueg'  // SLURM account or queue
    time = slurmTimeFormat(params.time)      // Use time from params (default: 36h)
    memory = params.memory  // Use memory from params (default: 249 GB)
    cpus = params.cpus      // Use CPUs from params (default: 64)

    // Define custom SLURM options
    clusterOptions = '''
        #SBATCH --job-name=${params.markname}_${params.ref}
        #SBATCH --output=slurm-%j.out
        #SBATCH --error=slurm-%j.err
    '''
}